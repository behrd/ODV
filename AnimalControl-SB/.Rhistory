ctspreds = cbind("Price" = real.estate$Price, "Sqft" = real.estate$Sqft, "Lot Size" = real.estate$Lot)
pairs(cbind(log(ctspreds[,1]), log(ctspreds[,2]), ctspreds[,3]))
f = "https://data.cityofchicago.org/api/views/zuxi-7xem/rows.csv?accessType=DOWNLOAD"
data.latlong =  read.csv(f, header = T)
row.has.na <- apply(data.latlong, 1, function(x){any(is.na(x))})
sum(row.has.na)
library(sp)
library(rgdal)
library(maps)
setwd("/Users/Dave/ODV/311-light_outages-CHI/Boundaries - Census Tracts - 2010")
# load shapefile of chicago census tracts
chi.shp = readOGR("geo_export_18596c0a-9532-4114-a5c0-408e8e252c19.shp")
# read in lat/long from 311 data
f = "https://data.cityofchicago.org/api/views/zuxi-7xem/rows.csv?accessType=DOWNLOAD"
data =  read.csv(f, header = T)
data.latlong = cbind(data$Longitude, data$Latitude)
d.ll.filter = na.omit(data.latlong)
coordinates(data.latlong) = c("Longitude", "Latitude")
library(sp)
library(rgdal)
library(maps)
setwd("/Users/Dave/ODV/311-light_outages-CHI/Boundaries - Census Tracts - 2010")
# load shapefile of chicago census tracts
chi.shp = readOGR("geo_export_18596c0a-9532-4114-a5c0-408e8e252c19.shp")
# read in lat/long from 311 data
f = "https://data.cityofchicago.org/api/views/zuxi-7xem/rows.csv?accessType=DOWNLOAD"
data =  read.csv(f, header = T)
d.ll = data[,13:14]
d.ll.filter = na.omit(d.ll)
coordinates(data.latlong) = c("Longitude", "Latitude")
coordinates(data.latlong) = ~Latitude+Longitude
na.omit(data)
na.omit(data)
coordinates(data) = ~Latitude+Longitude
na.omit(data)
coordinates(data) = ~Latitude+Longitude
head(na.omit(data))
data = na.omit(data)
coordinates(data) = ~Latitude+Longitude
proj4string(data.latlong) <- proj4string(chi.shp)
proj4string(data) <- proj4string(chi.shp)
in.tract <- !is.na(over(data, as(chi.shp, "SpatialPolygons")))
mean(in.tract)
plot(coordinates(data.), type="n")
proj4string(data) <- proj4string(chi.shp)
in.tract <- !is.na(over(data, as(chi.shp, "SpatialPolygons")))
mean(in.tract)
plot(coordinates(data), type="n")
map("world", region="usa", add=TRUE)
plot(chi.shp, border="green", add=TRUE)
points(subset(data, !in.tract), pch=1, col="gray")
points(subset(data, in.tract), pch=16, col="red")
map("world", region="usa", add=TRUE)
map("world", region="usa", add=TRUE)
plot(coordinates(data), type="n")
map("world", region="usa", add=TRUE)
plot(chi.shp, border="green", add=TRUE)
plot(coordinates(data), type="n")
map("world", region="usa", add=TRUE)
plot(chi.shp, border="green", add=TRUE)
plot(coordinates(data), type="n")
map("world", region="usa", add=TRUE)
plot(chi.shp, border="green", add=TRUE)
points(subset(data, !in.tract), pch=1, col="gray")
points(subset(data, in.tract), pch=16, col="red")
coordinates(data) = ~Longitude+Latitude
library(sp)
library(rgdal)
library(maps)
setwd("/Users/Dave/ODV/311-light_outages-CHI/Boundaries - Census Tracts - 2010")
# load shapefile of chicago census tracts
chi.shp = readOGR("geo_export_18596c0a-9532-4114-a5c0-408e8e252c19.shp")
# read in lat/long from 311 data
f = "https://data.cityofchicago.org/api/views/zuxi-7xem/rows.csv?accessType=DOWNLOAD"
data =  read.csv(f, header = T)
data = na.omit(data)
coordinates(data) = ~Longitude+Latitude
proj4string(data) <- proj4string(chi.shp)
in.tract <- !is.na(over(data, as(chi.shp, "SpatialPolygons")))
mean(in.tract)
plot(coordinates(data), type="n")
map("world", region="usa", add=TRUE)
plot(chi.shp, border="green", add=TRUE)
points(subset(data, !in.tract), pch=1, col="gray")
points(subset(data, in.tract), pch=16, col="red")
plot(coordinates(data), type="n")
map("world", region="usa", add=TRUE)
plot(chi.shp, border="green", add=TRUE)
plot(coordinates(data), type="n", xlim=c(-87,-88), ylim=c(41,42))
map("world", region="usa", add=TRUE)
plot(chi.shp, border="green", add=TRUE)
library(sp)
library(rgdal)
library(maps)
setwd("/Users/Dave/ODV/311-light_outages-CHI/Boundaries - Census Tracts - 2010")
# load shapefile of chicago census tracts
chi.shp = readOGR("geo_export_18596c0a-9532-4114-a5c0-408e8e252c19.shp")
# read in lat/long from 311 data
f = "https://data.cityofchicago.org/api/views/zuxi-7xem/rows.csv?accessType=DOWNLOAD"
data =  read.csv(f, header = T)
data = na.omit(data)
coordinates(data) = ~Latitude+Longitude
proj4string(data) <- proj4string(chi.shp)
in.tract <- !is.na(over(data, as(chi.shp, "SpatialPolygons")))
mean(in.tract)
plot(coordinates(data), type="n",)
map("world", region="usa", add=TRUE)
plot(chi.shp, border="green", add=TRUE)
points(subset(data, !in.tract), pch=1, col="gray")
points(subset(data, in.tract), pch=16, col="red")
plot(coordinates(data), type="n",)
map("world", region="usa", add=TRUE)
plot(chi.shp, border="green", add=TRUE)
chi.shp$geoid10
chi.shp$tractce10
chi.shp@data
chi.shp@data$id = rownames(chi.shp)
chi.shp.pts = fortify(chi.shp, region = "id")
library(plyr)
library(rgdal)
library(maptools)
library(ggplot2)
chi.shp.pts = fortify(chi.shp, region = "id")
chi.shp.pts = fortify(chi.shp, region = "id")
chi.shp = readOGR("geo_export_18596c0a-9532-4114-a5c0-408e8e252c19.shp")
setwd("/Users/Dave/ODV/311-light_outages-CHI/Boundaries - Census Tracts - 2010")
# load shapefile of chicago census tracts
chi.shp = readOGR("geo_export_18596c0a-9532-4114-a5c0-408e8e252c19.shp")
chi.shp@data$id = rownames(chi.shp)
chi.shp.pts = fortify(chi.shp, region = "id")
chi.shp = readOGR("geo_export_18596c0a-9532-4114-a5c0-408e8e252c19.shp")
setwd("/Users/Dave/ODV/311-light_outages-CHI/Boundaries - Census Tracts - 2010")
# load shapefile of chicago census tracts
chi.shp = readOGR("geo_export_18596c0a-9532-4114-a5c0-408e8e252c19.shp")
chi.shp@data$id = rownames(chi.shp@data)
chi.shp.pts = fortify(chi.shp, region = "id")
chi.df = join(chi.shp.pts, chi.shp@data, by = "id")
head(chi.df)
ggplot(chi.df) +
aes(long,lat,group=group,fill=LEVEL3_NAM) +
geom_polygon() +
geom_path(color="white") +
coord_equal()
ggplot(chi.df)
chi.df = join(chi.shp.pts, chi.shp@data, by = "id")
ggplot(chi.df)
ggplot(chi.df) +
aes(long,lat,group=group,fill=LEVEL3_NAM) +
geom_polygon() +
geom_path(color="white") +
coord_equal() +
scale_fill_brewer("Utah Ecoregion")
ggplot(chi.df) +
aes(long,lat,group=group) +
geom_polygon() +
geom_path(color="white") +
coord_equal() +
scale_fill_brewer("Utah Ecoregion")
ggplot(chi.df) +
aes(long,lat,group=group, fill=fl) +
geom_polygon() +
geom_path(color="white") +
coord_equal() +
scale_fill_brewer("Utah Ecoregion")
head(chi.df)
ggplot(chi.df) +
aes(long,lat,group=group) +
geom_polygon() +
geom_path(color="white") +
coord_equal() +
scale_fill_brewer("order")
ggplot(chi.df) +
aes(long,lat,group=group) +
geom_polygon() +
geom_path(color="white") +
coord_equal() +
scale_colour_brewer()
ggplot(chi.df) +
aes(long,lat,group=group) +
geom_polygon() +
geom_path(color="white") +
coord_equal()
f = "https://data.cityofchicago.org/api/views/zuxi-7xem/rows.csv"
data =  read.csv(f, header = T)
head(dta)
head(data)
chi.shp
head(chi.shp)
# General set-up for the report.
# I find this useful, but you may improve upon, ignore, or remove
#  (possibly at your own peril).
# Tasks accomplished:
# Don't print out code
# Save results so that code blocks aren't re-run unless code
# changes (cache), _or_ a relevant earlier code block changed (autodep),
# don't clutter R output with messages or warnings (message, warning)
library(MASS)
library(knitr)
opts_chunk$set(echo=FALSE,
cache=TRUE, autodep=TRUE,
message=FALSE, warning=FALSE)
# Turn off meaningless clutter in summary() output
options(show.signif.stars=FALSE)
# An example which recodes a factor
# Three levels: 1 bedroom, 2--4 bedrooms, 5+ bedrooms
real.estate$Beds.Coded <- cut(real.estate$Bedroom,
breaks=c(1,2,5,Inf),
include.lowest=TRUE, right=FALSE,
labels=c("1","2--4","5+"))
# Check that it works:
with(real.estate, table(Bedroom, Beds.Coded))
real.estate$Since1990 <- ifelse(real.estate$YearBuild > 1990, 1, 0)
# Create all the model formulae
# We _could_ just type them all out, but that would take so long, and be
# so error-prone, that it's better to do a _little_ automation
# Start with a vector of model formulas
# Write all the models you want into this vector
# The one below would (eventually) have 12 models.
all.the.formulas <- vector(length=12, mode="character")
all.the.formulas[1] <- c(Price~Sqft+factor(Quality)+factor(AdjHighway)+factor(Beds.Coded)+factor(Since1990))
all.the.formulas[2] <- c(Price~Sqft+Bedroom+factor(Quality)+factor(AdjHighway)+factor(Since1990))
all.the.formulas[3] <- c(Price~Sqft+YearBuild+factor(Quality)+factor(AdjHighway)+factor(Beds.Coded))
all.the.formulas[4] <- c(Price~Sqft+Bedroom+YearBuild+factor(Quality)+factor(AdjHighway))
all.the.formulas[5] <- c(Price~Sqft+Bedroom+factor(Quality)+factor(AdjHighway))
all.the.formulas[6] <- c(Price~Sqft+YearBuild+factor(Quality)+factor(AdjHighway))
all.the.formulas[7] <- c(Price~Sqft+Bedroom+YearBuild+factor(AdjHighway))
all.the.formulas[8] <- c(Price~Sqft+Bedroom+YearBuild+factor(Quality))
all.the.formulas[9] <- c(Price~Sqft+YearBuild+factor(Beds.Coded)+factor(AdjHighway))
all.the.formulas[10] <- c(Price~Sqft+YearBuild+factor(Beds.Coded)+factor(Quality))
all.the.formulas[11] <- c(Price~Sqft+factor(Beds.Coded)+factor(AdjHighway)+factor(Since1990))
all.the.formulas[11] <- c(Price~Sqft+factor(Beds.Coded)+factor(AdjHighway))
# Function to calculate LOO-CV score for a linear model
# Source: notes for Lecture 3
# Input: a model as fit by lm()
# Output: leave-one-out CV score
cv.lm <- function(mdl) {
return(mean((residuals(mdl)/(1-hatvalues(mdl)))^2))
}
# Divide the data in two, by random sampling of rows
select.rows <- sample(1:nrow(real.estate), replace=FALSE,
size=floor(nrow(real.estate)/2))
# That half of the data set will now be used for selection
select.set <- real.estate[select.rows,]
# The other half will be used for inference later
inference.set <- real.estate[-select.rows,]
# Make a list containing all of the estimated models from all the
# different formulas
all.the.models <- lapply(all.the.formulas,
function(fmla) { lm(fmla, data=select.set) } )
initial.mdl <- lm(Price ~ factor(Bedroom + Bathroom + Airconditioning + Garage + Pool + Quality + AdjHighway) + Sqft + Lot, data=real.estate)
qqnorm(rstandard(initial.mdl))
qqline(rstandard(initial.mdl))
shapiro.test(rstandard(initial.mdl))
resid.vs.pred <- function(mdl, pred='fitted', data, standardized=TRUE, ...) {
if (standardized) {
resids <- rstandard(mdl)
} else {
resids <- residuals(mdl)
}
if (pred=="fitted") {
preds <- fitted(mdl)
} else {
preds <- data[,pred]
}
plot(preds, resids, xlab=pred, ylab="Residuals", ...)
abline(h=0, col="red")
mean.spline <- smooth.spline(x=preds, y=resids, cv=TRUE)
lines(mean.spline, col="grey")
abline(h=2*sd(resids), col="red", lty="dotted")
abline(h=-2*sd(resids), col="red", lty="dotted")
var.spline <- smooth.spline(x=preds, y=resids^2, cv=TRUE)
lines(x=var.spline$x, y=mean.spline$y+2*sqrt(var.spline$y), col="grey",
lty="dotted")
lines(x=var.spline$x, y=mean.spline$y-2*sqrt(var.spline$y), col="grey",
lty="dotted")
}
resid.vs.pred(initial.mdl, data = real.estate)
resid.vs.pred(initial.mdl, pred = "Sqft", data = real.estate)
resid.vs.pred(initial.mdl, pred = "Lot", data = real.estate)
library(lmtest)
bptest(initial.mdl)
boxplot(rstandard(initial.mdl) ~ real.estate$Bedroom, varwidth=TRUE, main="Residuals vs. Bedrooms", col=color)
boxplot(rstandard(initial.mdl) ~ real.estate$Bathroom, varwidth=TRUE, main="Residuals vs. Bathrooms", col=color)
boxplot(rstandard(initial.mdl) ~ real.estate$Garage, varwidth=TRUE, main="Residuals vs. Garage", col=color)
boxplot(rstandard(initial.mdl) ~ real.estate$Quality, varwidth=TRUE, main="Residuals vs. Quality", col=color)
plot(cooks.distance(initial.mdl), pch=18,
col=ifelse(cooks.distance(initial.mdl) > 0.1, "red", "black"),
ylab="Cook's Distance")
bad.houses <- cooks.distance(initial.mdl) > 0.1
kable(real.estate[bad.houses,c("Price","Sqft","Bedroom","Bathroom")])
real.estate <- real.estate[-c(108),]
ctspreds = cbind("Price" = real.estate$Price, "Sqft" = real.estate$Sqft, "Lot Size" = real.estate$Lot)
pairs(ctspreds[,1:3])
head(cor(subset(real.estate, select = -c(ID))))
real.estate <- real.estate[-c(108),]
ctspreds = cbind("Price" = real.estate$Price, "Sqft" = real.estate$Sqft, "Lot Size" = real.estate$Lot)
pairs(ctspreds[,1:3])
color = c("blue","yellow","red","lightblue","thistle","lightpink","brown")
boxplot(ctspreds[,1]/10000~real.estate$Airconditioning, notch=TRUE, varwidth=TRUE, data=real.estate,
names=c("No AC", "AC"), main="Price ($10,000) vs. Air-conditioning", col=color)
boxplot(Price/10000~Bedroom,data=real.estate,main="Price ($10,000) vs. Number of Bedrooms", col=color)
boxplot(Price/10000~Bathroom,data=real.estate,main="Price ($10,000) vs. Number of Bathrooms", col = color)
boxplot(Price/10000~Garage,data=real.estate,main="Price ($10,000) vs. Garage Size",col=color)
boxplot(Price/10000~Pool,data=real.estate,main="Price ($10,000) vs. Pool", names=c("Absence","Presence"), col=color)
boxplot(Price/10000~YearBuild,data=real.estate,main="Price ($10,000) vs. YearBuild", col=color)
boxplot(Price/10000~Quality,data=real.estate,main="Price ($10,000) vs. House Quality", names=c("High Quality","Medium Quality","Low Quality"), col=color)
boxplot(Price/10000~AdjHighway,data=real.estate,main="Price ($10,000) vs. Adjacent Highway", names=c("Otherwise","Adjacent to Highway"), col=color)
mypoints <- matrix(c(1,3,2,2,-1,-2), ncol=2)
totalDistance <- fucntion(x) {
sum(sqrt(apply((t(mypoints) - x)^2, 2, sum)))
}
totalDistance <- function(x) {
sum(sqrt(apply((t(mypoints) - x)^2, 2, sum)))
}
totalSquaredDistance <- function(x) {
sum(apply((t(mypoints) - x)^2,2, sum)
}
totalSquaredDistance <- function(x) {
sum(apply((t(mypoints) - x)^2,2, sum))
}
xbar <- c(2,-1/3)
totalDistance(xbar)
totalSquaredDistance(xbar)
myGuess <- xbar - c(0.5,0)
totalDistance(myGuess)
myGuess <- xbar - c(0.1,0)
totalDistance(myGuess)
myGuess <- xbar - c(-.8,2/3)
totalDistance(myGuess)
source('~/.active-rstudio-document', echo=TRUE)
myGuess <- xbar - c(-.9,2/3)
totalDistance(myGuess)
myGuess <- xbar - c(-.7,.7)
totalDistance(myGuess)
myGuess <- xbar - c(-.7,.9)
totalDistance(myGuess)
mypoints2 <- matrix(c(0,0,1,10,2,-20), ncol = 2)
mypoints <- matrix(c(0,0,1,10,2,-20), ncol = 2)
mypoints <- matrix(c(1,0,2,10,0,-20), ncol = 2)
totalDistance(xbar2)
xbar2 <- c(1, -10/3)
totalDistance(
xbar2 <- c(1, -10/3)
totalDistance(xbar2)
mypt <- (1.75,0)
totalDistance(mypt)
mypt <- (1.75,0)
totalDistance(mypt)
mypt <- c(1.75,0)
totalDistance(mypt)
source('~/SAMSI/Untitled.R')
numDays = attend[length(attend[,1]),]$Date - attend[1,]$Date
load("processedAttendance.Rdata")
library(knitr)
numDays = attend[length(attend[,1]),]$Date - attend[1,]$Date
dates = attend[1,]$Date + 1:numDays
k = 1
attendanceAllTime = vector(length = numDays)
#not sure how to vectorize this for loop. Does anyone have any ideas?
for(i in dates){
attendanceAllTime[k] = sum(attend$Date == i) # & attend$No.show == "No" & attend$Late.Cancel == "No") #could include this line if we only want to count people who show up
k = k + 1
}
remove(k)
#par(mfrow = c(2, 2), mar = c(4, 4, 2, 0))
plot(attendanceAllTime ~ dates, ylab = "attendance", xlab = "day", main = "attendance vs. day (all time)")
month <- function(date){
as.numeric(substring(as.character(date), 6, 7))
}
year <- function(date){
as.numeric(substring(as.character(date), 1, 4))
}
monthlyAttendance <- function(m, y){
sum(attendanceAllTime[month(dates) == m & year(dates) == y])
}
recentAttendance = attendanceAllTime[year(dates) >= 2016]
recentDates = dates[year(dates) >= 2016]
#Not sure how to increase the number tic marks on the x-axis. Does anyone know?
plot(recentAttendance ~ recentDates, ylab = "attendance", xlab = "day", main = "attendance vs day (since 2016)")
#TO-DO: describe what the lines on the boxplot mean
boxplot(attendanceAllTime ~ month(dates), ylab = "daily attendance", xlab = "month", main = "daily attendance by month",
names = c("Jan", "Feb", "Mar", "Aprl", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
boxplot(attendanceAllTime ~ factor(weekdays(dates), c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")),
ylab = "daily attendance", xlab = "weekday", main = "daily attendance by weekday", range = 4,
names = c("Sun", "Mon", "Tues", "Wed", "Thur", "Fri", "Sat"))
#Since the weekends are clearly different, I thought it would be interesting to reproduce the original, but this time color coded by
#weekend vs weekday
plot(attendanceAllTime ~ dates, ylab = "attendance", xlab = "day", main = "attendance vs. day (all time)",
sub = "weekend days are red, weekdays are black",
col = ifelse(weekdays(dates) == "Saturday" | weekdays(dates) == "Sunday", "red", "black"))
plot(recentAttendance ~ recentDates, ylab = "attendance", xlab = "day", main = "attendance vs day (since 2016)",
sub = "weekend days are red, weekdays are black",
col = ifelse(weekdays(recentDates) == "Saturday" | weekdays(recentDates) == "Sunday", "red", "black"))
#clearly there is a huge difference here, so I replotted the month plot for both weekday and weekend
attendanceWeekend = attendanceAllTime[weekdays(dates) == "Saturday" | weekdays(dates) == "Sunday"]
datesWeekend = dates[weekdays(dates) == "Saturday" | weekdays(dates) == "Sunday"]
attendanceWeekday = attendanceAllTime[!(weekdays(dates) == "Saturday" | weekdays(dates) == "Sunday")]
datesWeekday = dates[!(weekdays(dates) == "Saturday" | weekdays(dates) == "Sunday")]
#TO-DO: describe what the lines on the boxplot mean
boxplot(attendanceWeekend ~ month(datesWeekend), ylab = "daily attendance on weekend days", xlab = "month",
main = "daily attendance on the weeekend by month",
names = c("Jan", "Feb", "Mar", "Aprl", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"), range = 3)
#TO-DO: describe what the lines on the boxplot mean
boxplot(attendanceWeekday ~ month(datesWeekday), ylab = "daily attendance on weekdays", xlab = "month",
main = "daily attendance on weekdays by month",
names = c("Jan", "Feb", "Mar", "Aprl", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
monthRange = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
yearRange = c(2011, 2012, 2013, 2014, 2015, 2016, 2017)
monthlyAttendanceVector = vector(length = (length(monthRange) + 1)*length(yearRange))
for(i in 1:7){
for(j in 1:13){
if(j == 13){
monthlyAttendanceVector[(i - 1)*13 + j] = yearRange[i]
}
else{
monthlyAttendanceVector[(i - 1)*13 + j] = monthlyAttendance(j, yearRange[i])
}
}
}
monthlyAttendanceMatrix = matrix(data = monthlyAttendanceVector, nrow = 7, ncol = 13, byrow = TRUE)
monthlyAttendanceDF = data.frame(monthlyAttendanceMatrix, row.names = 13)
kable(monthlyAttendanceDF, row.names = TRUE, col.names = monthRange, caption = "Total attendance each month")
lastFourAttendance = attendanceAllTime[year(dates) != 2011 & year(dates) != 2012 &
weekdays(dates) != "Sunday" & weekdays(dates) != "Saturday"]
JanFirsts = as.Date(c("2013-01-01", "2014-01-01", "2015-01-01", "2016-01-01", "2017-01-01"))
lastFourDates = dates[year(dates) != 2011 & year(dates) != 2012 &
weekdays(dates) != "Sunday" & weekdays(dates) != "Saturday"]
lastFourDist = lastFourDates - JanFirsts[year(lastFourDates) - 2012]
plot(lastFourAttendance~lastFourDist, xlab = "days since January 1st", ylab = "daily attendance", main = "daily attendance on weekdays vs time of the year since January 2013")
annualAttendanceModel = lm(lastFourAttendance~lastFourDist)
abline(annualAttendanceModel)
setwd("~/ODV/AnimalControl-SB")
setwd("~/ODV/AnimalControl-SB")
dat = read.csv("Animal_Care_and_Control_Monthly_Statistics.csv")
summary(dat)
na.omit(dat)
dat = na.omit(dat)
summary(dat)
kable(dat)
boxplot(adoptions)
boxplot(dat$adoptions)
boxplot(dat$Adoptions)
boxplot(dat$Adoptions~dat$Month)
plot(dat$Adoptions~dat$Month)
abline(mean(dat$Adoptions))
boxplot(dat$Adoptions~dat$Month)
plot(dat$Adoptions~dat$Month)
abline(mean(dat$Adoptions))
plot(dat$Adoptions~dat$Month, xlab= "Month", ylab="# of Adoptions")
plot(dat$Adoptions~dat$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions 2014")
kable(dat[,-2])
plot(dat$Adoptions~dat$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions 2014")
plot(dat$Bite_Cases_Serviced_by_SBACC~dat$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases 2014")
par(mfrow(c(1,2)))
plot(dat$Adoptions~dat$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions 2014")
plot(dat$Bite_Cases_Serviced_by_SBACC~dat$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases 2014")
plot(dat$Adoptions~dat$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions 2014")
plot(dat$Bite_Cases_Serviced_by_SBACC~dat$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases 2014")
dim(dat)
dat.final = dat[,c(-2,-7)]
dat.final
kable(dat.final) #removed year column due to redundancy
plot(dat.final$Adoptions~dat.final$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(dat.final$Bite_Cases_Serviced_by_SBACC~dat.final$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases")
plot(dat.final$Pets_Returned_Home~dat.final$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(density(dat.final$Adoptions~dat.final$Month), xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(dat.final$Adoptions~dat.final$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(dat.final$Bite_Cases_Serviced_by_SBACC~dat.final$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases")
plot(dat.final$Pets_Returned_Home~dat.final$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(dat.final$Pets_Returned_Home~dat.final$Month, xlab= "Month", ylab="# of Pets Returned Home", main="Monthly Pets Returned Home")
plot(dat.final$Adoptions~dat.final$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(dat.final$Bite_Cases_Serviced_by_SBACC~dat.final$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases")
plot(dat.final$Pets_Returned_Home~dat.final$Month, xlab= "Month", ylab="# of Pets Returned Home", main="Monthly Pets Returned Home")
plot(dat.final$Adoptions~dat.final$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(dat.final$Bite_Cases_Serviced_by_SBACC~dat.final$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases")
plot(dat.final$Pets_Returned_Home~dat.final$Month, xlab= "Month", ylab="# of Pets Returned Home", main="Monthly Pets Returned Home")
colnames(dat.final)
setwd("~/ODV/AnimalControl-SB")
dat = read.csv("Animal_Care_and_Control_Monthly_Statistics.csv")
dat = na.omit(dat) #removing NA's
dat.final = dat[,c(-2,-7)] # removed year column which contained only 2014 and FID column which is identical to month column
#kable(dat.final)
plot(dat.final$Adoptions~dat.final$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(dat.final$Bite_Cases_Serviced_by_SBACC~dat.final$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases")
plot(dat.final$Pets_Returned_Home~dat.final$Month, xlab= "Month", ylab="# of Pets Returned Home", main="Monthly Pets Returned Home")
setwd("~/ODV/AnimalControl-SB")
dat = read.csv("Animal_Care_and_Control_Monthly_Statistics.csv")
dat = na.omit(dat) #removing NA's
dat.final = dat[,c(-2,-7)] # removed year column which contained only 2014 and FID column which is identical to month column
kable(dat.final)
# Chunk 1: Initial-Analysis
setwd("~/ODV/AnimalControl-SB")
dat = read.csv("Animal_Care_and_Control_Monthly_Statistics.csv")
dat = na.omit(dat) #removing NA's
dat.final = dat[,c(-2,-7)] # removed year column which contained only 2014 and FID column which is identical to month column
kable(dat.final)
# Chunk 2: Plots
plot(dat.final$Adoptions~dat.final$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(dat.final$Bite_Cases_Serviced_by_SBACC~dat.final$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases")
plot(dat.final$Pets_Returned_Home~dat.final$Month, xlab= "Month", ylab="# of Pets Returned Home", main="Monthly Pets Returned Home")
# Chunk 3: Analysis
setwd("~/ODV/AnimalControl-SB")
dat = read.csv("Animal_Care_and_Control_Monthly_Statistics.csv")
dat = na.omit(dat) #removing NA's
dat.final = dat[,c(-2,-7)] # removed year column which contained only 2014 and FID column which is identical to month column
kable(dat.final)
plot(dat.final$Adoptions~dat.final$Month, xlab= "Month", ylab="# of Adoptions", main="Monthly Adoptions")
plot(dat.final$Bite_Cases_Serviced_by_SBACC~dat.final$Month, xlab= "Month", ylab="# of Bite Cases", main="Monthly Bite Cases")
plot(dat.final$Pets_Returned_Home~dat.final$Month, xlab= "Month", ylab="# of Pets Returned Home", main="Monthly Pets Returned Home")
summary(dat.final)
summary(dat.final)
summary(dat.final)
